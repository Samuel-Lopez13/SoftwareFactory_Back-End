// <auto-generated />
using System;
using Core.Infraestructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Infraestructure.Persistance.Migrations
{
    [DbContext(typeof(FactoryContext))]
    [Migration("20231007165248_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.Calificacion", b =>
                {
                    b.Property<int>("Calificacion_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Calificacion_Id"));

                    b.Property<int>("Producto_Id")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_Id")
                        .HasColumnType("int");

                    b.HasKey("Calificacion_Id");

                    b.HasIndex("Producto_Id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("Calificacion");
                });

            modelBuilder.Entity("Core.Domain.Entities.Comentario", b =>
                {
                    b.Property<int>("Comentario_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Comentario_Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Producto_Id")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_Id")
                        .HasColumnType("int");

                    b.HasKey("Comentario_Id");

                    b.HasIndex("Producto_Id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("Core.Domain.Entities.Compra", b =>
                {
                    b.Property<int>("Compra_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Compra_Id"));

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<int>("Producto_Id")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_Id")
                        .HasColumnType("int");

                    b.HasKey("Compra_Id");

                    b.HasIndex("Producto_Id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("Core.Domain.Entities.Documento", b =>
                {
                    b.Property<int>("Documento_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Documento_Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Producto_Id")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Documento_Id");

                    b.HasIndex("Producto_Id");

                    b.ToTable("Documento");
                });

            modelBuilder.Entity("Core.Domain.Entities.Like", b =>
                {
                    b.Property<int>("Like_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Like_Id"));

                    b.Property<int>("Producto_Id")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_Id")
                        .HasColumnType("int");

                    b.HasKey("Like_Id");

                    b.HasIndex("Producto_Id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("Core.Domain.Entities.Producto", b =>
                {
                    b.Property<int>("Producto_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Producto_Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lenguaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumComentarios")
                        .HasColumnType("int");

                    b.Property<int>("NumLikes")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("Promedio")
                        .HasColumnType("int");

                    b.Property<int>("PromedioDatos")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_Id")
                        .HasColumnType("int");

                    b.HasKey("Producto_Id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Core.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Usuario_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Usuario_Id"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FotoPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Usuario_Id");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Entities.Calificacion", b =>
                {
                    b.HasOne("Core.Domain.Entities.Producto", "Productos")
                        .WithMany("Calificaciones")
                        .HasForeignKey("Producto_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Calificacion_Id_Producto");

                    b.HasOne("Core.Domain.Entities.Usuario", "Usuarios")
                        .WithMany("Calificaciones")
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Calificacion_Id_Usuario");

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Entities.Comentario", b =>
                {
                    b.HasOne("Core.Domain.Entities.Producto", "Productos")
                        .WithMany("Comentarios")
                        .HasForeignKey("Producto_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Comentario_Id_Producto");

                    b.HasOne("Core.Domain.Entities.Usuario", "Usuarios")
                        .WithMany("Comentarios")
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Comentario_Id_Usuario");

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Entities.Compra", b =>
                {
                    b.HasOne("Core.Domain.Entities.Producto", "Productos")
                        .WithMany("Compras")
                        .HasForeignKey("Producto_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Compra_Id_Producto");

                    b.HasOne("Core.Domain.Entities.Usuario", "Usuarios")
                        .WithMany("Compras")
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Compra_Id_Usuario");

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Entities.Documento", b =>
                {
                    b.HasOne("Core.Domain.Entities.Producto", "Productos")
                        .WithMany("Documentos")
                        .HasForeignKey("Producto_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Documentos_Id_Producto");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Core.Domain.Entities.Like", b =>
                {
                    b.HasOne("Core.Domain.Entities.Producto", "Productos")
                        .WithMany("Likes")
                        .HasForeignKey("Producto_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Like_Id_Producto");

                    b.HasOne("Core.Domain.Entities.Usuario", "Usuarios")
                        .WithMany("Likes")
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Like_Id_Usuario");

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Entities.Producto", b =>
                {
                    b.HasOne("Core.Domain.Entities.Usuario", "Usuarios")
                        .WithMany("Productos")
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Producto_Id_Usuario");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Entities.Producto", b =>
                {
                    b.Navigation("Calificaciones");

                    b.Navigation("Comentarios");

                    b.Navigation("Compras");

                    b.Navigation("Documentos");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Core.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Calificaciones");

                    b.Navigation("Comentarios");

                    b.Navigation("Compras");

                    b.Navigation("Likes");

                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
